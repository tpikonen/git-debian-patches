#!/usr/bin/env python
# Copyright (C) 2008-2013 by Teemu Ikonen <tpikonen@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import sys, os, subprocess
from optparse import OptionParser

usage="%prog [-o outputfile] patch_a patch_b"

description="""\
Create a patch reverting another patch partially.
If patch_a and patch_b are two diffs which independently apply cleanly to a
source tree, output a minimal patch outpatch such that a stack of
patch_a, outpatch and patch_b applies cleanly to the original source tree.
"""


def gethunks(filename, patchname):
    """Return a list of hunk range tuples."""
    def tuplify(x):
        if x == []:
            return []
        else:
            return [(x[0], x[0]+x[1])] + tuplify(x[2:])
    cmd = "filterdiff -i " + filename + " " + patchname + \
    r''' | sed -ne 's/^@@ *-\([0-9]*\),\([0-9]*\) +.*@@.*/\1\n\2/p' '''
    f = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE).stdout
    hunks = tuplify([int(l) for l in f.readlines()])
    f.close()
    return hunks


def get_conflicts(inhunks, fihunks):
    """Return indices of ranges in `inhunks` overlapping w. ranges in `fihunks`.
    """
    i = -1
    fip = 0
    conflicts = []
    for hunk in inhunks:
        i = i+1
        nextin = False
        while(not nextin):
            if fip >= len(fihunks):
                break
            fihunk = fihunks[fip]
            # hunk before fihunk
            if hunk[1] < fihunk[0]:
                nextin = True
            # overlap
            elif (hunk[1] >= fihunk[0] and hunk[1] <= fihunk[1]) \
              or (hunk[0] >= fihunk[0] and hunk[0] <= fihunk[1]) \
              or (hunk[0] <= fihunk[0] and hunk[1] >= fihunk[1]) :
                conflicts.append(i)
                nextin = True
            # hunk after fihunk
            elif hunk[0] > fihunk[1]:
                fip = fip+1
    return conflicts


def main():
    oprs = OptionParser(usage=usage, description=description)
    oprs.add_option("-o", "--output", type="string", dest="outfname", \
        default="/dev/stdout", metavar="output filename", \
        help="Output file name. Default standard output.")
    (opts, args) = oprs.parse_args()
    if len(args) != 2:
        oprs.error("Two patch files required as input.")
    outfile = open(opts.outfname, 'w')

    inpatch = args[0]
    fipatch = args[1]
    f = subprocess.Popen("lsdiff " + fipatch, \
                         shell=True, stdout=subprocess.PIPE).stdout
    filelist = [file.strip() for file in f.readlines()]
    f.close()
    for el in filelist:
        inhunks = gethunks(el, inpatch)
        fihunks = gethunks(el, fipatch)
        confhunks = get_conflicts(inhunks, fihunks)
        confstr = ""
        for n in confhunks:
            confstr = confstr + str(n+1) + ","
        confstr = confstr[0:len(confstr)-1]
        if len(confstr) > 0:
            cmd = "filterdiff -i " + el + " --hunks=" + confstr + " " + inpatch
            cmd = cmd + " | interdiff /dev/stdin /dev/null"
            subprocess.Popen(cmd, shell=True, stdout=outfile).wait()
            outfile.flush()
    outfile.close()


if __name__ == "__main__":
    main()
