How to update Debian sources with a new upstream version
========================================================

1. Update the 'upstream' and 'pristine-tar' branches with the 'git import-orig'
command from git-buildpackage.

git import-orig --no-merge --pristine-tar ../upstream_ver.orig.tar.gz


2. Merge the updated 'upstream' branch to all of the patch ('p/*') branches.
Resolve conflicts with git mergetool or by hand.

git checkout p/makefile ; git merge upstream ; git mergetool ; git commit
git checkout p/feature1 ; git merge upstream ; git mergetool ; git commit
git checkout p/feature2 ; git merge upstream ; git mergetool ; git commit


3a. Create a temporary branch starting from one of the patch branches.

git checkout -b temp p/makefile


3b. Merge all the patch branches to the temporary branch and resolve
conflicts. This branch is now the patched upstream source without Debian
files. The merge can be an octopus merge:

git merge p/feature1 p/feature2

or if merging several, possibly conflicting branches is too complicated,
a serial merging of all the patch branches

git merge p/feature1
git merge p/feature2


4. Store the state of the 'temp' branch to the master branch. The conflicts
are already resolved in the 'temp' branch, so the merge strategy should be
'theirs'. Do not commit the merge yet.

git co master; git merge --squash -s recursive -X theirs temp


5. Manipulate the merge information, so that the merge looks like it has
been made from upstream to master:

git rev-parse upstream > .git/MERGE_HEAD
echo "Merge from upstream branch with merged patches" > .git/COMMIT_EDITMSG


6. Commit the merge:

git commit


7. At this point you can start working on the debian/ files, add new
patches and revise the old ones. When you are sure that the merge went ok,
and does not need fixing you can delete the 'temp' branch.

git branch -D temp
