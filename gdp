#!/bin/bash
# Copyright (C) 2008-2018 by Teemu Ikonen <tpikonen@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

set -e

patchdir="debian/patches"
metadir="debian/metapatches"
seriesfile="${patchdir}/series"
prefix=${GDP_BRANCH_PREFIX:-"p/"}
pext=".patch"
debbranch="master"
upbranch="upstream"
pristbranch="pristine-tar"

# usage $EXITCODE $MESSAGE
# Print usage and die() with the given message and exit code.
usage ()
{
    cat >&2 << EOM
Usage:
    $(basename "$0") [-p <branch-prefix>] [refresh | tag-heads | new-patch <name> | pick <branch> <commit> | merge-upstream | merge-patches | log [<patchbranch]]

git debian patch helper.

Commands:
    refresh     Generate debian/patches from patch branches.
    tag-heads   Tag upstream, debian and patch branches for release.
    new-patch <name>
                Create a new patch + branch with a given name.
    pick <branch> <commit>
                Cherry pick <commit> to <branch> without leaving
                the current branch.
    merge-upstream
                Merge upstream branch (default '$upbranch') to the current
                branch with suitable 'git merge' options.
    merge-patches
                Merge all patch branches with the correct prefix
                (now '$prefix') to the current branch with suitable
                'git merge' options.
    log [<patchbranch>]
                Run 'git log' showing only commits made directly to a patch
                branch, leaving out upstream commits or merges.

Options:
    -p, --branch-prefix
                Set the patch branch prefix used in subcommands like
                'merge-patches' and 'refresh'. You can also set this via
                GDP_BRANCH_PREFIX environment variable.
                Currently set to '$prefix'.
EOM
#Options:
#    -x      ?
#EOM
    echo "" >&2
    die "$1" "$2"
}


# die $EXITCODE $MESSAGE
# Print a message and exit with a given exit code.
die ()
{
    echo "$2" >&2
    exit "$1"
}


# Recreate patches with git-genpatches.
refresh ()
{
    dh_testdir
    rm -f ${patchdir}/debian-changes-*
    git-genpatches -a -s -x '^debian/' -m $metadir -p $patchdir -b $upbranch -d $debbranch
}


# tag-heads [$VERSION]
# Tag current git branch heads with the (debian) version.
# If $VERSION is not given, get it from debian/changelog.
# Tag for the debian branch (usually 'master') has the name $VERSION/debian,
# upstream branch tag has the name $VERSION/upstream and the patch branch
# tags are named $VERSION/$PATCHBRANCH. Additionally, the debian branch is
# tagged with debian/$VERSION to be compatible with git-buildpackage.
tagheads ()
{
    dh_testdir
    version=$1
    # FIXME: Check if the version string makes sense
    if [ -z ${version} ] && [ "${version+xxx}" = "xxx" ] ; then
        version=$(dpkg-parsechangelog | sed -n 's/^Version: \(.*\)$/\1/p')
    fi
    echo "Tagging ${debbranch} with ${version}/${debbranch}"
    git tag ${version}/${debbranch} ${debbranch}
    echo "Tagging ${upbranch} with ${version}/${upbranch}"
    git tag ${version}/${upbranch} ${upbranch}
    if git rev-parse --verify -q ${pristbranch} > /dev/null ; then
        echo "Tagging ${pristbranch} with ${version}/${pristbranch}"
        git tag ${version}/${pristbranch} ${pristbranch}
    else
        echo "No '${pristbranch}' branch found."
    fi
    i=1
    for metafile in ${metadir}/*
    do
        branch=$(sed -n 's/Git-Branch: *\(.*\)$/\1/p' $metafile)
        echo "Tagging ${branch} with ${version}/${branch}"
        git tag ${version}/${branch} ${branch}
    done
    echo "Tagging ${debbranch} with debian/${version}"
    git tag debian/${version} ${debbranch}
}


# newpatch patchname
# Create a new patch branch branching from current upstream and
# start the editor with a partially filled DEP-3 header in $metadir
newpatch ()
{
    dh_testdir
    patchname=$1
    pnum_width=2 # Number of characters in metapatch number
    if [ ${#patchname} -lt 1 ] ; then
        echo "You must give a patch name."
        exit 1
    fi
    if [ ! -d $metadir ] ; then
        if [ -e $metadir ] ; then
            echo "Error: $metadir exists, but is not a directory."
            exit 1
        fi
        mkdir -p $metadir
    fi
    npatches=$(ls $metadir | wc -l)
    echo "You have currently $npatches patches."
    lastpatch=$(ls ${metadir} | tail -n 1)
    lastnum=$(echo ${lastpatch} | head -c ${pnum_width})
    echo "Last metapatch is ${lastpatch} with number ${lastnum}"
    pnum=$(expr ${lastnum} + 1)
    branchname=${prefix}${patchname}
    echo "Creating a new branch $branchname ..."
    git branch $branchname $upbranch
    metaname=$(printf "%s/%0${pnum_width}d_%s" $metadir $pnum $patchname)
    echo "Creating metapatch $metaname ..."
    cat > $metaname << EOF_really
From: $DEBFULLNAME <$DEBEMAIL>
Subject: 
Git-Branch: $branchname
EOF_really
    echo "Launching $EDITOR $metaname ..."
    $EDITOR $metaname
}


# pick patchbranch <commit-ish>
# Cherry-pick a given commit to a patchbranch.
pick ()
{
    echo $#
    if [ $# -lt 2 ] ; then
        echo "You must give a patch branch name and a commit."
        exit 1
    fi
    branch=$(git rev-parse --symbolic --verify $1 2> /dev/null) \
        || (echo "$1 is not a valid branch." ; exit 1)
    commit=$(git rev-parse --verify $2 2> /dev/null) \
        || (echo "$2 is not a valid commit." ; exit 1)
    currbranch=$(git symbolic-ref HEAD)
    currbranch=${currbranch##refs/heads/}
    git checkout $branch
    git cherry-pick $commit
    git checkout $currbranch
}


# merge-upstream
# Merge upbranch to debbranch with suitable git merge options
merge_upstream ()
{
    dh_testdir
    currbranch=$(git symbolic-ref --short HEAD)
#    [ "$currbranch" = "$debbranch" ] \
#        || die 1 "Current branch is not the Debian branch ($debbranch)."
    git merge -s recursive -X ours "$upbranch"
}


# merge_patches
# Do a series of squash merges of patch branches to the Debian branch.
# The patch branches should be already merged with upstream, so the squash
# commits will only bring the changes introduced in the patch+upstream
# merges to the Debian branch.
merge_patches ()
{
    dh_testdir
    currbranch=$(git symbolic-ref --short HEAD)
#    [ "$currbranch" = "$debbranch" ] \
#        || die 1 "Current branch is not the Debian branch ($debbranch)."
    branches=$(git branch --list "$prefix""*")
    echo "Committing merge results from branches:"
    echo "$branches"
    git merge-base --is-ancestor "$upbranch" "$currbranch" \
        || die 1 "Current branch is not merged with branch '$upbranch'."
    tmpout=$(tempfile)
    for patchbranch in $branches ; do
        if git merge-base --is-ancestor "$upbranch" "$patchbranch" ; then
            echo "Processing branch $patchbranch"
            # The 'resolve' strategy seems to pick up the correct merge base
            # (i.e. upstream, or $upbranch) better than 'recursive'.
            git merge --squash -s resolve "$patchbranch" &> $tmpout \
                || { echo "Merge failed:" ; cat "$tmpout" ; false ; }
            # commit but exclude everything under 'debian/' (i.e. headers)
            git commit -m "$patchbranch + $upbranch merge result." \
                -- . ':!debian/' &> $tmpout || cat "$tmpout"
            # remove headers from index and tree
            git reset --hard HEAD &> $tmpout || cat "$tmpout"
        else
            die 1 "Branch '$patchbranch' is not merged with '$upbranch'."
        fi
    done
    rm -f "$tmpout"
}


# log [ <patchbranch> ]
# Run git log with arguments which cause it to show only commits made to
# the patchbranch, no merges and upstream commits
log ()
{
    local opts branch rest

    opts=
    branch=
    rest=
    while [ "$#" -gt 0 ]
    do
        case "$1" in
            -*)
                opts="$opts $1" ;;
            *)
                if [ "$branch" = "" ] ; then
                    branch="$1"
                else
                    rest="$rest $1"
                fi
        esac
        shift
    done
    [ "$branch" = "" ] && branch="HEAD"

    git log --no-merges --oneline --right-only $opts "$upbranch...$branch" $rest

}


PROGNAME=$(basename $0)
case $1 in
    "" | "-h" | "--help")
        usage 1 "" ;;
    -p|--branch-prefix)
        shift ; prefix="$1" ; shift ;;
    refresh)
        shift ; refresh ;;
    tag-heads)
        shift ; tagheads $@ ;;
    new-patch|newpatch)
        shift ; newpatch $@ ;;
    pick)
        shift ; pick $@ ;;
    merge-upstream)
        shift ; merge_upstream $@ ;;
    merge-patches)
        shift ; merge_patches $@ ;;
    log)
        shift ; log $@ ;;
    *)
        die 1 "$PROGNAME: Error: Unknown subcommand."
        ;;
esac
