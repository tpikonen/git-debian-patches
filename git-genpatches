#!/usr/bin/env python
# Author: Teemu Ikonen <tpikonen@gmail.com>
# This program is in public domain

import os, sys, shutil, subprocess, fnmatch
from optparse import OptionParser

description="""\
Create a series of patches to take a branch to another through a number
of feature branches."""

usage="%prog [options] <commit-ish> ... "


def frob(cmd):
    print cmd
    return os.system(cmd)


def getrefs():
    cmd = r"git show-ref | sed -e 's,.*refs/[^ /]*/\([^ ]*\).*,\1,'"
    print cmd
    f = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE).stdout
    refs = [line.strip() for line in f.readlines() ]
    f.close()
    return refs


def iscommit(name):
    if len(name) == 0:
        return False
    cmd = "git name-rev " + name
    print cmd
    f = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE).stdout
    output = f.readline()
    f.close()
    if len(output) > 0:
        return True
    else:
        return False


def gitdiff(b1, b2, pname, exlist):
    ex = ""
    if exlist:
        ex = " | filterdiff " + reduce(lambda x,y: x + " -x " + y, exlist, "")
    cmd = "git diff "+ b1 + ".." + b2 + " | filterdiff" + ex + " > " + pname
    return frob(cmd)


def main():
    default_base = "upstream"
    default_dest = "master"
    default_patchdir = "debian/patches/"
    oprs = OptionParser(usage=usage, description=description)
    oprs.add_option("-b", "--base", type="string", dest="base", \
        default=default_base, metavar="<commit-ish>", \
        help="Commit to base the patches to. Default '%s'." % default_base)
    oprs.add_option("-d", "--dest", type="string", dest="dest", \
        default=default_dest, metavar="<commit-ish>", \
        help="Commit ending the patch stack. Default '%s'." % default_dest)
    oprs.add_option("-p", "--patchdir", type="string", dest="patchdir", \
        default=default_patchdir, metavar="<dir>", \
        help="Directory where patches are stored. Default '%s'." \
            % default_patchdir)
    oprs.add_option("-x", "--exclude", action="append", type="string", \
        dest="exclude", metavar="<shell-glob>", \
        help="Exclude pattern fed to 'filterdiff -x'. You can specify\
 more patterns by giving this option more than once.")
    oprs.add_option("-s", "--series", action="store_true", dest="series", \
        default=False,\
        help="Write out a quilt type series file to patchdir.")
    (opts, args) = oprs.parse_args()
    if not os.path.isdir(opts.patchdir):
        oprs.error("Output directory "+opts.patchdir+" not found.")
    patchdir = opts.patchdir
    patchdir = patchdir + "/"
    base = opts.base
    dest = opts.dest
    series = opts.series
    exlist = opts.exclude
    if not iscommit(base):
        oprs.error("'" + base + "' is not a valid commit")
    if not iscommit(dest):
        oprs.error("'" + dest + "' is not a valid commit")

    allrefs = getrefs()
    frefs = []
    for name in args:
        l = fnmatch.filter(allrefs, name)
        if l:
            frefs = frefs + l
        elif iscommit(name):
            frefs.append(name)
        else:
            oprs.error("Could not match '"+name+"' to a ref.")
    frefs = sorted(list(set(frefs)))
    npatches = len(frefs)

    cmd = 'git stash save "Local changes saved by git-genpatches"'
    frob(cmd)

    tmpbranch = os.path.basename(os.tempnam())
    cmd = "git checkout -b " + tmpbranch + " " + base
    frob(cmd)

    fpatches = []
    revpatches = [];
    if npatches > 0:
        fpatches.append(os.tempnam())
        gitdiff(base, frefs[0], fpatches[0], exlist)
    for i in range(1,npatches):
        fpatches.append(os.tempnam())
        gitdiff(base, frefs[i], fpatches[i], exlist)
        tname = os.tempnam()
        cmd = "minrevert -o " + tname + " " + fpatches[i-1] + " " + fpatches[i]
        frob(cmd)
        try:
            s = os.stat(tname)
            if s.st_size > 0:
                revpatches.append(tname)
            else:
                revpatches.append("")
                os.remove(tname)
        except:
            revpatches.append("")

    #print fpatches
    #print revpatches
#    tmpdir = os.tempnam()
#    os.makedirs(tmpdir)
#    tmpdir = tmpdir + "/"

    pno = 1
    patchnames = []
    def movefeat(i, n):
        patchnames.append(("%02d_" % n) + os.path.basename(frefs[i]) + ".patch")
        shutil.move(fpatches[i], patchdir + patchnames[n-1])
    def moverev(i, n):
        patchnames.append(("%02d_" % n) + "conflicts" + ".patch")
        shutil.move(revpatches[i], patchdir + patchnames[n-1])
    if npatches > 0:
        movefeat(0, pno)
    pno = pno+1
    for i in range(1,npatches):
        if len(revpatches[i-1]) > 0:
            moverev(i-1, pno)
            pno = pno+1
        movefeat(i, pno)
        pno = pno+1

    for patch in patchnames:
        cmd = "git apply --index " + patchdir + patch
        frob(cmd)

    cmd = "git commit -m 'Feature patches applied'"
    frob(cmd)

    patchnames.append(("%02d_" % pno) + "rest" + ".patch")

    gitdiff("HEAD", dest, patchdir + patchnames[pno-1], exlist)
    cmd = "git apply --index " + patchdir + patchnames[pno-1]
    frob(cmd)
    cmd = "git commit -m 'Rest patch applied'"
    frob(cmd)

    cmd = "git diff HEAD.." + dest + " | filterdiff | filterdiff " + reduce(lambda x,y: x + " -x " + y, exlist, "") + " | wc -l"
    status = frob(cmd)
    print "diff exit code: " + str(status)
    #if status > 255:
#    print "Found differences not representable in the final patch, exiting."
#    sys.exit(1)

    if series:
        f = open(patchdir + "series", "w")
        for p in patchnames:
            f.write(p + "\n")
        f.close()

    cmd = "git checkout " + dest
    frob(cmd)
    cmd = "git branch -D " + tmpbranch
    frob(cmd)


if __name__ == "__main__":
    main()
